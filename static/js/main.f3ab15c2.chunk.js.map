{"version":3,"sources":["theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createMuiTheme","palette","type","primary","main","secondary","background","default","paper","error","props","MuiTextField","variant","toBytes","data","Uint8Array","from","length","_","i","charCodeAt","toHex","Array","map","b","toString","padStart","join","App","classes","useStyles","useState","apiKey","setApiKey","secretKey","setSecretKey","a","crypto","subtle","importKey","name","hash","key","timestamp","Date","now","queryString","sign","signature","fetch","headers","response","console","json","log","stream","WebSocket","startDate","onmessage","ev","tickers","JSON","parse","e","E","s","c","o","h","l","v","q","eventType","eventTime","symbol","closePrice","Number","openPrice","highPrice","lowPrice","totalTradedBaseAssetVolume","totalTradedQuoteAssetVolume","ticker","endsWith","Object","keys","close","selectedTickers","values","sort","slice","Promise","all","klinesResponse","klines","bars","openTime","open","high","low","volume","closeTime","quoteAssetVolume","tradesCount","takerBuyBaseAssetVolume","takerBuyQuoteAssetVolume","useEffect","localStorage","getItem","ThemeProvider","theme","CssBaseline","className","root","account","TextField","id","label","value","onChange","event","target","setItem","Button","disabled","onClick","mainAction","color","makeStyles","margin","spacing","display","gridAutoFlow","gridTemplateColumns","gridTemplateRows","rowGap","justifySelf","alignSelf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3ab15c2.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#bb86fc',\n    },\n    secondary: {\n      main: '#03dac6',\n    },\n    background: {\n      default: '#121212',\n      paper: '#121212',\n    },\n    error: {\n      main: '#cf6679',\n    },\n  },\n  props: {\n    MuiTextField: {\n      variant: 'filled',\n    },\n  },\n})\n","import Button from '@material-ui/core/Button'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport { useEffect, useState } from 'react'\nimport theme from './theme'\n\ntype Bar = {\n  openTime: number\n  open: number\n  high: number\n  low: number\n  close: number\n  volume: number\n  closeTime: number\n  quoteAssetVolume: number\n  tradesCount: number\n  takerBuyBaseAssetVolume: number\n  takerBuyQuoteAssetVolume: number\n}\n\ntype Ticker = {\n  eventType: string\n  eventTime: number\n  symbol: string\n  closePrice: number\n  openPrice: number\n  highPrice: number\n  lowPrice: number\n  totalTradedBaseAssetVolume: number\n  totalTradedQuoteAssetVolume: number\n}\n\nfunction toBytes(data: string): Uint8Array {\n  return Uint8Array.from({ length: data.length }, (_, i) => data.charCodeAt(i))\n}\n\nfunction toHex(data: ArrayBuffer): string {\n  return Array.from(new Uint8Array(data))\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')\n}\n\nexport default function App() {\n  const classes = useStyles()\n  const [apiKey, setApiKey] = useState('')\n  const [secretKey, setSecretKey] = useState('')\n\n  useEffect(() => {\n    setApiKey(localStorage.getItem('apiKey') ?? '')\n    setSecretKey(localStorage.getItem('secretKey') ?? '')\n  }, [])\n\n  async function getAccountInformation() {\n    const key = await crypto.subtle.importKey(\n      'raw',\n      toBytes(secretKey),\n      { name: 'HMAC', hash: 'SHA-256' },\n      true,\n      ['sign']\n    )\n    const timestamp = Date.now()\n    const queryString = `timestamp=${timestamp}`\n    const signature = await crypto.subtle.sign(\n      'HMAC',\n      key,\n      toBytes(queryString)\n    )\n    const response = await fetch(\n      `/api/v3/account?${queryString}&signature=${toHex(signature)}`,\n      { headers: { 'X-MBX-APIKEY': apiKey } }\n    )\n    console.log(await response.json())\n  }\n\n  async function subscribeToTickerStream() {\n    const stream = new WebSocket(\n      'wss://stream.binance.com:9443/ws/!miniTicker@arr'\n    )\n    const data: { [symbol: string]: Ticker } = {}\n    const startDate = Date.now()\n    stream.onmessage = async (ev) => {\n      let tickers: Ticker[] = JSON.parse(ev.data).map(\n        ({ e, E, s, c, o, h, l, v, q }: any): Ticker => ({\n          eventType: e,\n          eventTime: E,\n          symbol: s,\n          closePrice: Number(c),\n          openPrice: Number(o),\n          highPrice: Number(h),\n          lowPrice: Number(l),\n          totalTradedBaseAssetVolume: Number(v),\n          totalTradedQuoteAssetVolume: Number(q),\n        })\n      )\n      for (const ticker of tickers) {\n        if (ticker.symbol.endsWith('BUSD')) {\n          data[ticker.symbol] = ticker\n        }\n      }\n      console.log('Tickers loaded:', Object.keys(data).length)\n      if (Date.now() - startDate > 10000) {\n        stream.close()\n        const selectedTickers = Object.values(data)\n          .sort(\n            (a, b) =>\n              b.totalTradedQuoteAssetVolume - a.totalTradedQuoteAssetVolume\n          )\n          .slice(0, 3)\n        console.log(selectedTickers)\n\n        await Promise.all(\n          selectedTickers.map(async (ticker) => {\n            const klinesResponse = await fetch(\n              `/api/v3/klines?symbol=${ticker.symbol}&interval=5m`\n            )\n            const klines: number[][] = await klinesResponse.json()\n            const bars = klines.map<Bar>(\n              ([\n                openTime,\n                open,\n                high,\n                low,\n                close,\n                volume,\n                closeTime,\n                quoteAssetVolume,\n                tradesCount,\n                takerBuyBaseAssetVolume,\n                takerBuyQuoteAssetVolume,\n              ]) => ({\n                openTime,\n                open,\n                high,\n                low,\n                close,\n                volume,\n                closeTime,\n                quoteAssetVolume,\n                tradesCount,\n                takerBuyBaseAssetVolume,\n                takerBuyQuoteAssetVolume,\n              })\n            )\n            console.log(`${ticker.symbol}:`, bars)\n          })\n        )\n      }\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <div className={classes.account}>\n          <TextField\n            id=\"api-key\"\n            label=\"API Key\"\n            type=\"password\"\n            value={apiKey}\n            onChange={(event) => {\n              setApiKey(event.target.value)\n              localStorage.setItem('apiKey', event.target.value)\n            }}\n          />\n          <TextField\n            id=\"api-secret\"\n            label=\"Secret Key\"\n            type=\"password\"\n            value={secretKey}\n            onChange={(event) => {\n              setSecretKey(event.target.value)\n              localStorage.setItem('secretKey', event.target.value)\n            }}\n          />\n          <Button\n            disabled={!(apiKey && secretKey)}\n            onClick={getAccountInformation}\n          >\n            Get account information\n          </Button>\n        </div>\n        <Button variant=\"outlined\" onClick={subscribeToTickerStream}>\n          Subscribe to ticker stream\n        </Button>\n        <Button\n          className={classes.mainAction}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Test\n        </Button>\n      </div>\n    </ThemeProvider>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(2),\n    display: 'grid',\n    gridAutoFlow: 'column',\n    gridTemplateColumns: 'auto 1fr',\n    gridTemplateRows: 'repeat(2, auto)',\n    rowGap: theme.spacing(3),\n  },\n  account: {\n    display: 'grid',\n    rowGap: theme.spacing(1),\n  },\n  mainAction: {\n    justifySelf: 'center',\n    alignSelf: 'center',\n  },\n}))\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}