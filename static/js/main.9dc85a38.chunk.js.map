{"version":3,"sources":["theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createMuiTheme","palette","type","primary","main","secondary","background","default","paper","error","props","MuiTextField","variant","App","classes","useStyles","useState","apiKey","setApiKey","secretKey","setSecretKey","useEffect","localStorage","getItem","ThemeProvider","theme","CssBaseline","className","root","TextField","id","label","value","onChange","event","target","setItem","makeStyles","margin","spacing","display","gridTemplateColumns","gridTemplateRows","rowGap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAEeA,cAAe,CAC5BC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,WAAY,CACVC,QAAS,UACTC,MAAO,WAETC,MAAO,CACLL,KAAM,YAGVM,MAAO,CACLC,aAAc,CACZC,QAAS,a,OCfA,SAASC,IACtB,IAAMC,EAAUC,IAChB,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAOA,OALAC,qBAAU,WAAO,IAAD,IACdH,EAAS,UAACI,aAAaC,QAAQ,iBAAtB,QAAmC,IAC5CH,EAAY,UAACE,aAAaC,QAAQ,oBAAtB,QAAsC,MACjD,IAGD,eAACC,EAAA,EAAD,CAAeC,MAAOA,EAAtB,UACE,cAACC,EAAA,EAAD,IACA,sBAAKC,UAAWb,EAAQc,KAAxB,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,UACHC,MAAM,UACN7B,KAAK,WACL8B,MAAOf,EACPgB,SAAU,SAACC,GACThB,EAAUgB,EAAMC,OAAOH,OACvBV,aAAac,QAAQ,SAAUF,EAAMC,OAAOH,UAGhD,cAACH,EAAA,EAAD,CACEC,GAAG,aACHC,MAAM,aACN7B,KAAK,WACL8B,MAAOb,EACPc,SAAU,SAACC,GACTd,EAAac,EAAMC,OAAOH,OAC1BV,aAAac,QAAQ,YAAaF,EAAMC,OAAOH,gBAQ3D,IAAMjB,EAAYsB,aAAW,SAACZ,GAAD,MAAY,CACvCG,KAAM,CACJU,OAAQb,EAAMc,QAAQ,GACtBC,QAAS,OACTC,oBAAqB,cACrBC,iBAAkB,yBAClBC,OAAQlB,EAAMc,QAAQ,QCrCXK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1C,EAAD,MAEF2C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9dc85a38.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#bb86fc',\n    },\n    secondary: {\n      main: '#03dac6',\n    },\n    background: {\n      default: '#121212',\n      paper: '#121212',\n    },\n    error: {\n      main: '#cf6679',\n    },\n  },\n  props: {\n    MuiTextField: {\n      variant: 'filled',\n    },\n  },\n})\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport { useEffect, useState } from 'react'\nimport theme from './theme'\n\nexport default function App() {\n  const classes = useStyles()\n  const [apiKey, setApiKey] = useState('')\n  const [secretKey, setSecretKey] = useState('')\n\n  useEffect(() => {\n    setApiKey(localStorage.getItem('apiKey') ?? '')\n    setSecretKey(localStorage.getItem('secretKey') ?? '')\n  }, [])\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <TextField\n          id=\"api-key\"\n          label=\"API Key\"\n          type=\"password\"\n          value={apiKey}\n          onChange={(event) => {\n            setApiKey(event.target.value)\n            localStorage.setItem('apiKey', event.target.value)\n          }}\n        />\n        <TextField\n          id=\"api-secret\"\n          label=\"Secret Key\"\n          type=\"password\"\n          value={secretKey}\n          onChange={(event) => {\n            setSecretKey(event.target.value)\n            localStorage.setItem('secretKey', event.target.value)\n          }}\n        />\n      </div>\n    </ThemeProvider>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(2),\n    display: 'grid',\n    gridTemplateColumns: 'max-content',\n    gridTemplateRows: 'repeat(2, min-content)',\n    rowGap: theme.spacing(1),\n  },\n}))\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}