{"version":3,"sources":["theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createMuiTheme","palette","type","primary","main","secondary","background","default","paper","error","props","MuiTextField","variant","toBytes","data","Uint8Array","from","length","_","i","charCodeAt","toHex","Array","map","b","toString","padStart","join","App","classes","useStyles","useState","apiKey","setApiKey","secretKey","setSecretKey","a","crypto","subtle","importKey","name","hash","key","timestamp","Date","now","queryString","sign","signature","fetch","headers","response","console","json","log","useEffect","localStorage","getItem","ThemeProvider","theme","CssBaseline","className","root","TextField","id","label","value","onChange","event","target","setItem","Button","disabled","onClick","makeStyles","margin","spacing","display","gridTemplateColumns","gridTemplateRows","rowGap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAEeA,cAAe,CAC5BC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,WAAY,CACVC,QAAS,UACTC,MAAO,WAETC,MAAO,CACLL,KAAM,YAGVM,MAAO,CACLC,aAAc,CACZC,QAAS,a,QCdf,SAASC,EAAQC,GACf,OAAOC,WAAWC,KAAK,CAAEC,OAAQH,EAAKG,SAAU,SAACC,EAAGC,GAAJ,OAAUL,EAAKM,WAAWD,MAG5E,SAASE,EAAMP,GACb,OAAOQ,MAAMN,KAAK,IAAID,WAAWD,IAC9BS,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QACtCC,KAAK,IAGK,SAASC,IACtB,IAAMC,EAAUC,IAChB,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAH4B,4CAU5B,oCAAAC,EAAA,sEACoBC,OAAOC,OAAOC,UAC9B,MACA1B,EAAQqB,GACR,CAAEM,KAAM,OAAQC,KAAM,YACtB,EACA,CAAC,SANL,cACQC,EADR,OAQQC,EAAYC,KAAKC,MACjBC,EATR,oBASmCH,GATnC,SAU0BN,OAAOC,OAAOS,KACpC,OACAL,EACA7B,EAAQiC,IAbZ,cAUQE,EAVR,iBAeyBC,MAAM,mBAAD,OACPH,EADO,sBACkBzB,EAAM2B,IAClD,CAAEE,QAAS,CAAE,eAAgBlB,KAjBjC,eAeQmB,EAfR,YAmBEC,QAnBF,UAmBoBD,EAASE,OAnB7B,yBAmBUC,IAnBV,6DAV4B,sBAgC5B,OA3BAC,qBAAU,WAAO,IAAD,IACdtB,EAAS,UAACuB,aAAaC,QAAQ,iBAAtB,QAAmC,IAC5CtB,EAAY,UAACqB,aAAaC,QAAQ,oBAAtB,QAAsC,MACjD,IAyBD,eAACC,EAAA,EAAD,CAAeC,MAAOA,EAAtB,UACE,cAACC,EAAA,EAAD,IACA,sBAAKC,UAAWhC,EAAQiC,KAAxB,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,UACHC,MAAM,UACN/D,KAAK,WACLgE,MAAOlC,EACPmC,SAAU,SAACC,GACTnC,EAAUmC,EAAMC,OAAOH,OACvBV,aAAac,QAAQ,SAAUF,EAAMC,OAAOH,UAGhD,cAACH,EAAA,EAAD,CACEC,GAAG,aACHC,MAAM,aACN/D,KAAK,WACLgE,MAAOhC,EACPiC,SAAU,SAACC,GACTjC,EAAaiC,EAAMC,OAAOH,OAC1BV,aAAac,QAAQ,YAAaF,EAAMC,OAAOH,UAGnD,cAACK,EAAA,EAAD,CACEC,WAAYxC,GAAUE,GACtBuC,QA1DoB,2CAwDtB,2CAWR,IAAM3C,EAAY4C,aAAW,SAACf,GAAD,MAAY,CACvCG,KAAM,CACJa,OAAQhB,EAAMiB,QAAQ,GACtBC,QAAS,OACTC,oBAAqB,cACrBC,iBAAkB,yBAClBC,OAAQrB,EAAMiB,QAAQ,QC5EXK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChE,EAAD,MAEFiE,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.21a01a0d.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#bb86fc',\n    },\n    secondary: {\n      main: '#03dac6',\n    },\n    background: {\n      default: '#121212',\n      paper: '#121212',\n    },\n    error: {\n      main: '#cf6679',\n    },\n  },\n  props: {\n    MuiTextField: {\n      variant: 'filled',\n    },\n  },\n})\n","import Button from '@material-ui/core/Button'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport { useEffect, useState } from 'react'\nimport theme from './theme'\n\nfunction toBytes(data: string): Uint8Array {\n  return Uint8Array.from({ length: data.length }, (_, i) => data.charCodeAt(i))\n}\n\nfunction toHex(data: ArrayBuffer): string {\n  return Array.from(new Uint8Array(data))\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')\n}\n\nexport default function App() {\n  const classes = useStyles()\n  const [apiKey, setApiKey] = useState('')\n  const [secretKey, setSecretKey] = useState('')\n\n  useEffect(() => {\n    setApiKey(localStorage.getItem('apiKey') ?? '')\n    setSecretKey(localStorage.getItem('secretKey') ?? '')\n  }, [])\n\n  async function getAccountInformation() {\n    const key = await crypto.subtle.importKey(\n      'raw',\n      toBytes(secretKey),\n      { name: 'HMAC', hash: 'SHA-256' },\n      true,\n      ['sign']\n    )\n    const timestamp = Date.now()\n    const queryString = `timestamp=${timestamp}`\n    const signature = await crypto.subtle.sign(\n      'HMAC',\n      key,\n      toBytes(queryString)\n    )\n    const response = await fetch(\n      `/api/v3/account?${queryString}&signature=${toHex(signature)}`,\n      { headers: { 'X-MBX-APIKEY': apiKey } }\n    )\n    console.log(await response.json())\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <TextField\n          id=\"api-key\"\n          label=\"API Key\"\n          type=\"password\"\n          value={apiKey}\n          onChange={(event) => {\n            setApiKey(event.target.value)\n            localStorage.setItem('apiKey', event.target.value)\n          }}\n        />\n        <TextField\n          id=\"api-secret\"\n          label=\"Secret Key\"\n          type=\"password\"\n          value={secretKey}\n          onChange={(event) => {\n            setSecretKey(event.target.value)\n            localStorage.setItem('secretKey', event.target.value)\n          }}\n        />\n        <Button\n          disabled={!(apiKey && secretKey)}\n          onClick={getAccountInformation}\n        >\n          Get account information\n        </Button>\n      </div>\n    </ThemeProvider>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(2),\n    display: 'grid',\n    gridTemplateColumns: 'max-content',\n    gridTemplateRows: 'repeat(2, min-content)',\n    rowGap: theme.spacing(1),\n  },\n}))\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}