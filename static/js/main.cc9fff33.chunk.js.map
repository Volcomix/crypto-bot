{"version":3,"sources":["helpers/string.ts","components/Account.tsx","hooks/useKeys.ts","api/index.ts","components/SimpleQTable.tsx","components/TestStreaming.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toBytes","data","Uint8Array","from","length","_","i","charCodeAt","toHex","Array","map","b","toString","padStart","join","Account","classes","useStyles","useState","apiKey","setApiKey","secretKey","setSecretKey","useEffect","localStorage","getItem","updateApiKey","key","setItem","updateSecretKey","useKeys","a","crypto","subtle","importKey","name","hash","timestamp","Date","now","queryString","sign","signature","fetch","headers","response","console","json","log","className","root","TextField","id","label","type","value","onChange","event","target","Button","disabled","onClick","makeStyles","theme","display","rowGap","spacing","readTickers","tickersTimestamp","Number","JSON","parse","tickersResponse","tickersRaw","tickers","ticker","symbol","priceChange","priceChangePercent","weightedAvgPrice","prevClosePrice","lastPrice","lastQty","bidPrice","askPrice","openPrice","highPrice","lowPrice","volume","quoteVolume","openTime","closeTime","firstId","lastId","count","stringify","readKlines","interval","klinesResponse","klinesRaw","open","high","low","close","quoteAssetVolume","numberOfTrades","takerBuyBaseAssetVolume","takerBuyQuoteAssetVolume","SimpleQTable","isLearning","setLearning","selectedSymbols","setSelectedSymbols","qValues","setQValues","selectedTickers","filter","endsWith","sort","slice","Promise","all","klines","Math","floor","random","bars","variant","color","table","Typography","row","y","Fragment","iconUp","iconDown","qValue","x","gridRow","justifyItems","gridTemplateColumns","gap","alignItems","palette","success","main","transform","error","testStreaming","stream","WebSocket","startDate","onmessage","ev","e","E","s","c","o","h","l","v","q","eventType","eventTime","closePrice","totalTradedBaseAssetVolume","totalTradedQuoteAssetVolume","Object","keys","values","TestStreaming","createMuiTheme","primary","secondary","background","default","paper","props","MuiTextField","App","ThemeProvider","CssBaseline","margin","gridAutoFlow","gridTemplateRows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc9fff33.chunk.js","sourcesContent":["export function toBytes(data: string): Uint8Array {\n  return Uint8Array.from({ length: data.length }, (_, i) => data.charCodeAt(i))\n}\n\nexport function toHex(data: ArrayBuffer): string {\n  return Array.from(new Uint8Array(data))\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')\n}\n","import Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport React from 'react'\nimport { toBytes, toHex } from '../helpers/string'\nimport useKeys from '../hooks/useKeys'\n\nexport default function Account() {\n  const classes = useStyles()\n  const { apiKey, secretKey, updateApiKey, updateSecretKey } = useKeys()\n\n  async function getAccountInformation() {\n    const key = await crypto.subtle.importKey(\n      'raw',\n      toBytes(secretKey),\n      { name: 'HMAC', hash: 'SHA-256' },\n      true,\n      ['sign']\n    )\n    const timestamp = Date.now()\n    const queryString = `timestamp=${timestamp}`\n    const signature = await crypto.subtle.sign(\n      'HMAC',\n      key,\n      toBytes(queryString)\n    )\n    const response = await fetch(\n      `/api/v3/account?${queryString}&signature=${toHex(signature)}`,\n      { headers: { 'X-MBX-APIKEY': apiKey } }\n    )\n    console.log(await response.json())\n  }\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        id=\"api-key\"\n        label=\"API Key\"\n        type=\"password\"\n        value={apiKey}\n        onChange={(event) => updateApiKey(event.target.value)}\n      />\n      <TextField\n        id=\"api-secret\"\n        label=\"Secret Key\"\n        type=\"password\"\n        value={secretKey}\n        onChange={(event) => updateSecretKey(event.target.value)}\n      />\n      <Button disabled={!(apiKey && secretKey)} onClick={getAccountInformation}>\n        Get account information\n      </Button>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    rowGap: theme.spacing(1),\n  },\n}))\n","import { useEffect, useState } from 'react'\n\nexport default function useKeys() {\n  const [apiKey, setApiKey] = useState('')\n  const [secretKey, setSecretKey] = useState('')\n\n  useEffect(() => {\n    setApiKey(localStorage.getItem('apiKey') ?? '')\n    setSecretKey(localStorage.getItem('secretKey') ?? '')\n  }, [])\n\n  function updateApiKey(key: string) {\n    localStorage.setItem('apiKey', key)\n    setApiKey(key)\n  }\n\n  function updateSecretKey(key: string) {\n    localStorage.setItem('secretKey', key)\n    setSecretKey(key)\n  }\n\n  return { apiKey, secretKey, updateApiKey, updateSecretKey }\n}\n","import { KlineBar, KlineInterval, Ticker } from '../types'\n\nexport async function readTickers(): Promise<Ticker[]> {\n  const tickersTimestamp = Number(localStorage.getItem('tickersTimestamp'))\n\n  if (Date.now() - tickersTimestamp < 300000) {\n    return JSON.parse(localStorage.getItem('tickers')!)\n  }\n\n  const tickersResponse = await fetch('/api/v3/ticker/24hr')\n  const tickersRaw: any[] = await tickersResponse.json()\n\n  const tickers = tickersRaw.map<Ticker>((ticker) => ({\n    symbol: ticker.symbol,\n    priceChange: Number(ticker.priceChange),\n    priceChangePercent: Number(ticker.priceChangePercent),\n    weightedAvgPrice: Number(ticker.weightedAvgPrice),\n    prevClosePrice: Number(ticker.prevClosePrice),\n    lastPrice: Number(ticker.lastPrice),\n    lastQty: Number(ticker.lastQty),\n    bidPrice: Number(ticker.bidPrice),\n    askPrice: Number(ticker.askPrice),\n    openPrice: Number(ticker.openPrice),\n    highPrice: Number(ticker.highPrice),\n    lowPrice: Number(ticker.lowPrice),\n    volume: Number(ticker.volume),\n    quoteVolume: Number(ticker.quoteVolume),\n    openTime: ticker.openTime,\n    closeTime: ticker.closeTime,\n    firstId: ticker.firstId,\n    lastId: ticker.lastId,\n    count: ticker.count,\n  }))\n\n  localStorage.setItem('tickersTimestamp', Date.now().toString())\n  localStorage.setItem('tickers', JSON.stringify(tickers))\n\n  return tickers\n}\n\nexport async function readKlines(\n  symbol: string,\n  interval: KlineInterval\n): Promise<KlineBar[]> {\n  const klinesResponse = await fetch(\n    `/api/v3/klines?symbol=${symbol}&interval=${interval}`\n  )\n  const klinesRaw: any[][] = await klinesResponse.json()\n\n  return klinesRaw.map<KlineBar>(\n    ([\n      openTime,\n      open,\n      high,\n      low,\n      close,\n      volume,\n      closeTime,\n      quoteAssetVolume,\n      numberOfTrades,\n      takerBuyBaseAssetVolume,\n      takerBuyQuoteAssetVolume,\n    ]) => ({\n      openTime,\n      open: Number(open),\n      high: Number(high),\n      low: Number(low),\n      close: Number(close),\n      volume: Number(volume),\n      closeTime,\n      quoteAssetVolume: Number(quoteAssetVolume),\n      numberOfTrades,\n      takerBuyBaseAssetVolume: Number(takerBuyBaseAssetVolume),\n      takerBuyQuoteAssetVolume: Number(takerBuyQuoteAssetVolume),\n    })\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat'\nimport React, { useState } from 'react'\nimport { readKlines, readTickers } from '../api'\n\nexport default function SimpleQTable() {\n  const classes = useStyles()\n  const [isLearning, setLearning] = useState(false)\n  const [selectedSymbols, setSelectedSymbols] = useState<string[]>([])\n  const [qValues, setQValues] = useState<number[][]>([])\n\n  async function learn() {\n    setLearning(true)\n\n    const tickers = await readTickers()\n    const selectedTickers = tickers\n      .filter((ticker) => ticker.symbol.endsWith('BUSD'))\n      .sort((a, b) => b.quoteVolume - a.quoteVolume)\n      .slice(0, 3)\n\n    setSelectedSymbols(selectedTickers.map(({ symbol }) => symbol))\n    setQValues(\n      Array.from({ length: 2 ** selectedTickers.length }, () =>\n        Array.from({ length: selectedTickers.length }, () => 0)\n      )\n    )\n\n    const klines = await Promise.all(\n      selectedTickers.map(({ symbol }) => readKlines(symbol, '5m'))\n    )\n\n    console.log(klines)\n\n    const i = Math.floor(Math.random() * 500)\n    console.log(klines.map((bars) => bars[i].openTime))\n\n    setLearning(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      <Button variant=\"contained\" color=\"primary\" onClick={learn}>\n        {isLearning ? 'Cancel' : 'Learn'}\n      </Button>\n      <div className={classes.table}>\n        {selectedSymbols.map((symbol) => (\n          <Typography key={symbol} variant=\"body2\">\n            {symbol}\n          </Typography>\n        ))}\n        {selectedSymbols.map((symbol) => (\n          <Typography key={symbol} variant=\"body1\">\n            {symbol}\n          </Typography>\n        ))}\n        {qValues.map((row, y) => (\n          <React.Fragment key={y}>\n            {selectedSymbols.map((symbol, i) => (\n              <Typography key={symbol} variant=\"body2\">\n                <TrendingFlatIcon\n                  className={y & (2 ** i) ? classes.iconUp : classes.iconDown}\n                />\n              </Typography>\n            ))}\n            {row.map((qValue, x) => (\n              <Typography key={x} variant=\"body2\">\n                {qValue}\n              </Typography>\n            ))}\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    gridRow: '1 / -1',\n    display: 'grid',\n    rowGap: theme.spacing(2),\n    justifyItems: 'center',\n  },\n  table: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(6, auto)',\n    gap: theme.spacing(1),\n    justifyItems: 'center',\n    alignItems: 'center',\n  },\n  iconUp: {\n    color: theme.palette.success.main,\n    transform: 'rotate(-40deg)',\n  },\n  iconDown: {\n    color: theme.palette.error.main,\n    transform: 'rotate(40deg)',\n  },\n}))\n","import Button from '@material-ui/core/Button'\nimport React from 'react'\nimport { readKlines } from '../api'\nimport { StreamingTicker } from '../types'\n\nasync function testStreaming() {\n  const stream = new WebSocket(\n    'wss://stream.binance.com:9443/ws/!miniTicker@arr'\n  )\n  const data: { [symbol: string]: StreamingTicker } = {}\n  const startDate = Date.now()\n  stream.onmessage = async (ev) => {\n    let tickers: StreamingTicker[] = JSON.parse(ev.data).map(\n      ({ e, E, s, c, o, h, l, v, q }: any): StreamingTicker => ({\n        eventType: e,\n        eventTime: E,\n        symbol: s,\n        closePrice: Number(c),\n        openPrice: Number(o),\n        highPrice: Number(h),\n        lowPrice: Number(l),\n        totalTradedBaseAssetVolume: Number(v),\n        totalTradedQuoteAssetVolume: Number(q),\n      })\n    )\n    for (const ticker of tickers) {\n      if (ticker.symbol.endsWith('BUSD')) {\n        data[ticker.symbol] = ticker\n      }\n    }\n    console.log('Tickers loaded:', Object.keys(data).length)\n    if (Date.now() - startDate > 10000) {\n      stream.close()\n      const selectedTickers = Object.values(data)\n        .sort(\n          (a, b) =>\n            b.totalTradedQuoteAssetVolume - a.totalTradedQuoteAssetVolume\n        )\n        .slice(0, 3)\n      console.log(selectedTickers)\n\n      await Promise.all(\n        selectedTickers.map(async (ticker) => {\n          const klines = await readKlines(ticker.symbol, '5m')\n          console.log(`${ticker.symbol}:`, klines)\n        })\n      )\n    }\n  }\n}\n\nexport default function TestStreaming() {\n  return (\n    <Button variant=\"outlined\" onClick={testStreaming}>\n      Test streaming\n    </Button>\n  )\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#bb86fc',\n    },\n    secondary: {\n      main: '#03dac6',\n    },\n    background: {\n      default: '#121212',\n      paper: '#121212',\n    },\n    error: {\n      main: '#cf6679',\n    },\n  },\n  props: {\n    MuiTextField: {\n      variant: 'filled',\n    },\n  },\n})\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport Account from './components/Account'\nimport SimpleQTable from './components/SimpleQTable'\nimport TestStreaming from './components/TestStreaming'\nimport theme from './theme'\n\nexport default function App() {\n  const classes = useStyles()\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <Account />\n        <TestStreaming />\n        <SimpleQTable />\n      </div>\n    </ThemeProvider>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(2),\n    display: 'grid',\n    gridAutoFlow: 'column',\n    gridTemplateColumns: 'auto 1fr',\n    gridTemplateRows: 'max-content auto',\n    alignItems: 'start',\n    rowGap: theme.spacing(3),\n  },\n}))\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}